//include necessary header files
#include <iostream> //for standard input/output operations
#include <fstream> //for file input/output operations
#include <cstdlib> //for using rand() function
#include <ctime> //for seeding the random number generator with current time
#include <chrono> //for timing the execution of code
#include <omp.h> //for parallelization using OpenMP

using namespace std;

int main()
{
int N;
cout << "Enter matrix size N: ";
cin >> N;

int num_threads;
cout << "Enter number of threads: ";
cin >> num_threads;
omp_set_num_threads(num_threads);

//Allocate memory for matrices A, B, and C
int **A, **B, **C;
A = new int*[N];
B = new int*[N];
C = new int*[N];
for (int i = 0; i < N; i++)
{
    A[i] = new int[N];
    B[i] = new int[N];
    C[i] = new int[N];
}

//Initialize matrices A and B with random values
srand(time(NULL)); //seed the random number generator with the current time
for (int i = 0; i < N; i++)
{
    for (int j = 0; j < N; j++)
    {
        A[i][j] = rand() % 10; //generate a random number between 0 and 9 and assign it to A[i][j]
        B[i][j] = rand() % 10; //generate a random number between 0 and 9 and assign it to B[i][j]
    }
}

//Perform matrix multiplication C = A * B
auto start = chrono::steady_clock::now(); //get the current time
#pragma omp parallel for //start parallel execution using OpenMP
for (int i = 0; i < N; i++)
{
    for (int j = 0; j < N; j++)
    {
        C[i][j] = 0; //initialize the element of C[i][j] to 0
        for (int k = 0; k < N; k++)
        {
            C[i][j] += A[i][k] * B[k][j]; //multiply the corresponding elements of A and B and add to C[i][j]
        }
    }
}
auto end = chrono::steady_clock::now(); //get the current time again
auto diff = end - start; //calculate the difference between the two time points
double time = chrono::duration<double, milli>(diff).count(); //calculate the time difference in milliseconds

//Write matrix C to file
ofstream outfile("output.txt"); //create an output file stream and open a file called "output.txt"
for (int i = 0; i < N; i++)
{
    for (int j = 0; j < N; j++)
    {
        outfile << C[i][j] << " "; //write each element of C to the file
    }
}
outfile.close(); //close the output file stream

//Free memory allocated for matrices A, B, And C
for (int i = 0; i < N; i++)
{
    delete[] A[i];
    delete[] B[i];
    delete[] C[i];
}
delete[] A;
delete[] B;
delete[] C;

cout << "Matrix multiplication took " << time << " milliseconds." << endl; //output the time taken

 return 0;
}
